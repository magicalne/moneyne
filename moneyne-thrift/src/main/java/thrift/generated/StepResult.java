/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-27")
public class StepResult implements org.apache.thrift.TBase<StepResult, StepResult._Fields>, java.io.Serializable, Cloneable, Comparable<StepResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StepResult");

  private static final org.apache.thrift.protocol.TField STEP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stepName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RULE_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleResults", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField STEP_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("stepResult", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StepResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StepResultTupleSchemeFactory());
  }

  public String stepName; // required
  public Set<RuleResult> ruleResults; // required
  /**
   * 
   * @see Result
   */
  public Result stepResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STEP_NAME((short)1, "stepName"),
    RULE_RESULTS((short)2, "ruleResults"),
    /**
     * 
     * @see Result
     */
    STEP_RESULT((short)3, "stepResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STEP_NAME
          return STEP_NAME;
        case 2: // RULE_RESULTS
          return RULE_RESULTS;
        case 3: // STEP_RESULT
          return STEP_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STEP_NAME, new org.apache.thrift.meta_data.FieldMetaData("stepName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RULE_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("ruleResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RuleResult.class))));
    tmpMap.put(_Fields.STEP_RESULT, new org.apache.thrift.meta_data.FieldMetaData("stepResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StepResult.class, metaDataMap);
  }

  public StepResult() {
  }

  public StepResult(
    String stepName,
    Set<RuleResult> ruleResults,
    Result stepResult)
  {
    this();
    this.stepName = stepName;
    this.ruleResults = ruleResults;
    this.stepResult = stepResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StepResult(StepResult other) {
    if (other.isSetStepName()) {
      this.stepName = other.stepName;
    }
    if (other.isSetRuleResults()) {
      Set<RuleResult> __this__ruleResults = new HashSet<RuleResult>(other.ruleResults.size());
      for (RuleResult other_element : other.ruleResults) {
        __this__ruleResults.add(new RuleResult(other_element));
      }
      this.ruleResults = __this__ruleResults;
    }
    if (other.isSetStepResult()) {
      this.stepResult = other.stepResult;
    }
  }

  public StepResult deepCopy() {
    return new StepResult(this);
  }

  @Override
  public void clear() {
    this.stepName = null;
    this.ruleResults = null;
    this.stepResult = null;
  }

  public String getStepName() {
    return this.stepName;
  }

  public StepResult setStepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  public void unsetStepName() {
    this.stepName = null;
  }

  /** Returns true if field stepName is set (has been assigned a value) and false otherwise */
  public boolean isSetStepName() {
    return this.stepName != null;
  }

  public void setStepNameIsSet(boolean value) {
    if (!value) {
      this.stepName = null;
    }
  }

  public int getRuleResultsSize() {
    return (this.ruleResults == null) ? 0 : this.ruleResults.size();
  }

  public java.util.Iterator<RuleResult> getRuleResultsIterator() {
    return (this.ruleResults == null) ? null : this.ruleResults.iterator();
  }

  public void addToRuleResults(RuleResult elem) {
    if (this.ruleResults == null) {
      this.ruleResults = new HashSet<RuleResult>();
    }
    this.ruleResults.add(elem);
  }

  public Set<RuleResult> getRuleResults() {
    return this.ruleResults;
  }

  public StepResult setRuleResults(Set<RuleResult> ruleResults) {
    this.ruleResults = ruleResults;
    return this;
  }

  public void unsetRuleResults() {
    this.ruleResults = null;
  }

  /** Returns true if field ruleResults is set (has been assigned a value) and false otherwise */
  public boolean isSetRuleResults() {
    return this.ruleResults != null;
  }

  public void setRuleResultsIsSet(boolean value) {
    if (!value) {
      this.ruleResults = null;
    }
  }

  /**
   * 
   * @see Result
   */
  public Result getStepResult() {
    return this.stepResult;
  }

  /**
   * 
   * @see Result
   */
  public StepResult setStepResult(Result stepResult) {
    this.stepResult = stepResult;
    return this;
  }

  public void unsetStepResult() {
    this.stepResult = null;
  }

  /** Returns true if field stepResult is set (has been assigned a value) and false otherwise */
  public boolean isSetStepResult() {
    return this.stepResult != null;
  }

  public void setStepResultIsSet(boolean value) {
    if (!value) {
      this.stepResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STEP_NAME:
      if (value == null) {
        unsetStepName();
      } else {
        setStepName((String)value);
      }
      break;

    case RULE_RESULTS:
      if (value == null) {
        unsetRuleResults();
      } else {
        setRuleResults((Set<RuleResult>)value);
      }
      break;

    case STEP_RESULT:
      if (value == null) {
        unsetStepResult();
      } else {
        setStepResult((Result)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STEP_NAME:
      return getStepName();

    case RULE_RESULTS:
      return getRuleResults();

    case STEP_RESULT:
      return getStepResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STEP_NAME:
      return isSetStepName();
    case RULE_RESULTS:
      return isSetRuleResults();
    case STEP_RESULT:
      return isSetStepResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StepResult)
      return this.equals((StepResult)that);
    return false;
  }

  public boolean equals(StepResult that) {
    if (that == null)
      return false;

    boolean this_present_stepName = true && this.isSetStepName();
    boolean that_present_stepName = true && that.isSetStepName();
    if (this_present_stepName || that_present_stepName) {
      if (!(this_present_stepName && that_present_stepName))
        return false;
      if (!this.stepName.equals(that.stepName))
        return false;
    }

    boolean this_present_ruleResults = true && this.isSetRuleResults();
    boolean that_present_ruleResults = true && that.isSetRuleResults();
    if (this_present_ruleResults || that_present_ruleResults) {
      if (!(this_present_ruleResults && that_present_ruleResults))
        return false;
      if (!this.ruleResults.equals(that.ruleResults))
        return false;
    }

    boolean this_present_stepResult = true && this.isSetStepResult();
    boolean that_present_stepResult = true && that.isSetStepResult();
    if (this_present_stepResult || that_present_stepResult) {
      if (!(this_present_stepResult && that_present_stepResult))
        return false;
      if (!this.stepResult.equals(that.stepResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_stepName = true && (isSetStepName());
    list.add(present_stepName);
    if (present_stepName)
      list.add(stepName);

    boolean present_ruleResults = true && (isSetRuleResults());
    list.add(present_ruleResults);
    if (present_ruleResults)
      list.add(ruleResults);

    boolean present_stepResult = true && (isSetStepResult());
    list.add(present_stepResult);
    if (present_stepResult)
      list.add(stepResult.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(StepResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStepName()).compareTo(other.isSetStepName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepName, other.stepName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuleResults()).compareTo(other.isSetRuleResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuleResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleResults, other.ruleResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepResult()).compareTo(other.isSetStepResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stepResult, other.stepResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StepResult(");
    boolean first = true;

    sb.append("stepName:");
    if (this.stepName == null) {
      sb.append("null");
    } else {
      sb.append(this.stepName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ruleResults:");
    if (this.ruleResults == null) {
      sb.append("null");
    } else {
      sb.append(this.ruleResults);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stepResult:");
    if (this.stepResult == null) {
      sb.append("null");
    } else {
      sb.append(this.stepResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StepResultStandardSchemeFactory implements SchemeFactory {
    public StepResultStandardScheme getScheme() {
      return new StepResultStandardScheme();
    }
  }

  private static class StepResultStandardScheme extends StandardScheme<StepResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StepResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STEP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stepName = iprot.readString();
              struct.setStepNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RULE_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.ruleResults = new HashSet<RuleResult>(2*_set0.size);
                RuleResult _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new RuleResult();
                  _elem1.read(iprot);
                  struct.ruleResults.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setRuleResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STEP_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stepResult = thrift.generated.Result.findByValue(iprot.readI32());
              struct.setStepResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StepResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stepName != null) {
        oprot.writeFieldBegin(STEP_NAME_FIELD_DESC);
        oprot.writeString(struct.stepName);
        oprot.writeFieldEnd();
      }
      if (struct.ruleResults != null) {
        oprot.writeFieldBegin(RULE_RESULTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.ruleResults.size()));
          for (RuleResult _iter3 : struct.ruleResults)
          {
            _iter3.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stepResult != null) {
        oprot.writeFieldBegin(STEP_RESULT_FIELD_DESC);
        oprot.writeI32(struct.stepResult.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StepResultTupleSchemeFactory implements SchemeFactory {
    public StepResultTupleScheme getScheme() {
      return new StepResultTupleScheme();
    }
  }

  private static class StepResultTupleScheme extends TupleScheme<StepResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StepResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStepName()) {
        optionals.set(0);
      }
      if (struct.isSetRuleResults()) {
        optionals.set(1);
      }
      if (struct.isSetStepResult()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStepName()) {
        oprot.writeString(struct.stepName);
      }
      if (struct.isSetRuleResults()) {
        {
          oprot.writeI32(struct.ruleResults.size());
          for (RuleResult _iter4 : struct.ruleResults)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetStepResult()) {
        oprot.writeI32(struct.stepResult.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StepResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.stepName = iprot.readString();
        struct.setStepNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ruleResults = new HashSet<RuleResult>(2*_set5.size);
          RuleResult _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = new RuleResult();
            _elem6.read(iprot);
            struct.ruleResults.add(_elem6);
          }
        }
        struct.setRuleResultsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stepResult = thrift.generated.Result.findByValue(iprot.readI32());
        struct.setStepResultIsSet(true);
      }
    }
  }

}

