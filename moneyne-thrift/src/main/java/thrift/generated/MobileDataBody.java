/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-30")
public class MobileDataBody implements org.apache.thrift.TBase<MobileDataBody, MobileDataBody._Fields>, java.io.Serializable, Cloneable, Comparable<MobileDataBody> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MobileDataBody");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROTOCOL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalNumber", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LATEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latestTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EARLIEST_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MobileDataBodyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MobileDataBodyTupleSchemeFactory());
  }

  public String protocolVersion; // required
  public String protocolName; // required
  public long totalNumber; // required
  public long latestTime; // required
  public long earliestTime; // required
  public List<ByteBuffer> data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROTOCOL_VERSION((short)1, "protocolVersion"),
    PROTOCOL_NAME((short)2, "protocolName"),
    TOTAL_NUMBER((short)3, "totalNumber"),
    LATEST_TIME((short)4, "latestTime"),
    EARLIEST_TIME((short)5, "earliestTime"),
    DATA((short)6, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // PROTOCOL_NAME
          return PROTOCOL_NAME;
        case 3: // TOTAL_NUMBER
          return TOTAL_NUMBER;
        case 4: // LATEST_TIME
          return LATEST_TIME;
        case 5: // EARLIEST_TIME
          return EARLIEST_TIME;
        case 6: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALNUMBER_ISSET_ID = 0;
  private static final int __LATESTTIME_ISSET_ID = 1;
  private static final int __EARLIESTTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocolVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTOCOL_NAME, new org.apache.thrift.meta_data.FieldMetaData("protocolName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LATEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("latestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EARLIEST_TIME, new org.apache.thrift.meta_data.FieldMetaData("earliestTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MobileDataBody.class, metaDataMap);
  }

  public MobileDataBody() {
  }

  public MobileDataBody(
    String protocolVersion,
    String protocolName,
    long totalNumber,
    long latestTime,
    long earliestTime,
    List<ByteBuffer> data)
  {
    this();
    this.protocolVersion = protocolVersion;
    this.protocolName = protocolName;
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    this.latestTime = latestTime;
    setLatestTimeIsSet(true);
    this.earliestTime = earliestTime;
    setEarliestTimeIsSet(true);
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MobileDataBody(MobileDataBody other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocolVersion()) {
      this.protocolVersion = other.protocolVersion;
    }
    if (other.isSetProtocolName()) {
      this.protocolName = other.protocolName;
    }
    this.totalNumber = other.totalNumber;
    this.latestTime = other.latestTime;
    this.earliestTime = other.earliestTime;
    if (other.isSetData()) {
      List<ByteBuffer> __this__data = new ArrayList<ByteBuffer>(other.data);
      this.data = __this__data;
    }
  }

  public MobileDataBody deepCopy() {
    return new MobileDataBody(this);
  }

  @Override
  public void clear() {
    this.protocolVersion = null;
    this.protocolName = null;
    setTotalNumberIsSet(false);
    this.totalNumber = 0;
    setLatestTimeIsSet(false);
    this.latestTime = 0;
    setEarliestTimeIsSet(false);
    this.earliestTime = 0;
    this.data = null;
  }

  public String getProtocolVersion() {
    return this.protocolVersion;
  }

  public MobileDataBody setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocolVersion = null;
  }

  /** Returns true if field protocolVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocolVersion != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocolVersion = null;
    }
  }

  public String getProtocolName() {
    return this.protocolName;
  }

  public MobileDataBody setProtocolName(String protocolName) {
    this.protocolName = protocolName;
    return this;
  }

  public void unsetProtocolName() {
    this.protocolName = null;
  }

  /** Returns true if field protocolName is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolName() {
    return this.protocolName != null;
  }

  public void setProtocolNameIsSet(boolean value) {
    if (!value) {
      this.protocolName = null;
    }
  }

  public long getTotalNumber() {
    return this.totalNumber;
  }

  public MobileDataBody setTotalNumber(long totalNumber) {
    this.totalNumber = totalNumber;
    setTotalNumberIsSet(true);
    return this;
  }

  public void unsetTotalNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  /** Returns true if field totalNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID);
  }

  public void setTotalNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALNUMBER_ISSET_ID, value);
  }

  public long getLatestTime() {
    return this.latestTime;
  }

  public MobileDataBody setLatestTime(long latestTime) {
    this.latestTime = latestTime;
    setLatestTimeIsSet(true);
    return this;
  }

  public void unsetLatestTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATESTTIME_ISSET_ID);
  }

  /** Returns true if field latestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LATESTTIME_ISSET_ID);
  }

  public void setLatestTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATESTTIME_ISSET_ID, value);
  }

  public long getEarliestTime() {
    return this.earliestTime;
  }

  public MobileDataBody setEarliestTime(long earliestTime) {
    this.earliestTime = earliestTime;
    setEarliestTimeIsSet(true);
    return this;
  }

  public void unsetEarliestTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EARLIESTTIME_ISSET_ID);
  }

  /** Returns true if field earliestTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EARLIESTTIME_ISSET_ID);
  }

  public void setEarliestTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EARLIESTTIME_ISSET_ID, value);
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<ByteBuffer> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(ByteBuffer elem) {
    if (this.data == null) {
      this.data = new ArrayList<ByteBuffer>();
    }
    this.data.add(elem);
  }

  public List<ByteBuffer> getData() {
    return this.data;
  }

  public MobileDataBody setData(List<ByteBuffer> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((String)value);
      }
      break;

    case PROTOCOL_NAME:
      if (value == null) {
        unsetProtocolName();
      } else {
        setProtocolName((String)value);
      }
      break;

    case TOTAL_NUMBER:
      if (value == null) {
        unsetTotalNumber();
      } else {
        setTotalNumber((Long)value);
      }
      break;

    case LATEST_TIME:
      if (value == null) {
        unsetLatestTime();
      } else {
        setLatestTime((Long)value);
      }
      break;

    case EARLIEST_TIME:
      if (value == null) {
        unsetEarliestTime();
      } else {
        setEarliestTime((Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case PROTOCOL_NAME:
      return getProtocolName();

    case TOTAL_NUMBER:
      return getTotalNumber();

    case LATEST_TIME:
      return getLatestTime();

    case EARLIEST_TIME:
      return getEarliestTime();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case PROTOCOL_NAME:
      return isSetProtocolName();
    case TOTAL_NUMBER:
      return isSetTotalNumber();
    case LATEST_TIME:
      return isSetLatestTime();
    case EARLIEST_TIME:
      return isSetEarliestTime();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MobileDataBody)
      return this.equals((MobileDataBody)that);
    return false;
  }

  public boolean equals(MobileDataBody that) {
    if (that == null)
      return false;

    boolean this_present_protocolVersion = true && this.isSetProtocolVersion();
    boolean that_present_protocolVersion = true && that.isSetProtocolVersion();
    if (this_present_protocolVersion || that_present_protocolVersion) {
      if (!(this_present_protocolVersion && that_present_protocolVersion))
        return false;
      if (!this.protocolVersion.equals(that.protocolVersion))
        return false;
    }

    boolean this_present_protocolName = true && this.isSetProtocolName();
    boolean that_present_protocolName = true && that.isSetProtocolName();
    if (this_present_protocolName || that_present_protocolName) {
      if (!(this_present_protocolName && that_present_protocolName))
        return false;
      if (!this.protocolName.equals(that.protocolName))
        return false;
    }

    boolean this_present_totalNumber = true;
    boolean that_present_totalNumber = true;
    if (this_present_totalNumber || that_present_totalNumber) {
      if (!(this_present_totalNumber && that_present_totalNumber))
        return false;
      if (this.totalNumber != that.totalNumber)
        return false;
    }

    boolean this_present_latestTime = true;
    boolean that_present_latestTime = true;
    if (this_present_latestTime || that_present_latestTime) {
      if (!(this_present_latestTime && that_present_latestTime))
        return false;
      if (this.latestTime != that.latestTime)
        return false;
    }

    boolean this_present_earliestTime = true;
    boolean that_present_earliestTime = true;
    if (this_present_earliestTime || that_present_earliestTime) {
      if (!(this_present_earliestTime && that_present_earliestTime))
        return false;
      if (this.earliestTime != that.earliestTime)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocolVersion = true && (isSetProtocolVersion());
    list.add(present_protocolVersion);
    if (present_protocolVersion)
      list.add(protocolVersion);

    boolean present_protocolName = true && (isSetProtocolName());
    list.add(present_protocolName);
    if (present_protocolName)
      list.add(protocolName);

    boolean present_totalNumber = true;
    list.add(present_totalNumber);
    if (present_totalNumber)
      list.add(totalNumber);

    boolean present_latestTime = true;
    list.add(present_latestTime);
    if (present_latestTime)
      list.add(latestTime);

    boolean present_earliestTime = true;
    list.add(present_earliestTime);
    if (present_earliestTime)
      list.add(earliestTime);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    return list.hashCode();
  }

  @Override
  public int compareTo(MobileDataBody other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocolVersion()).compareTo(other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolVersion, other.protocolVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolName()).compareTo(other.isSetProtocolName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolName, other.protocolName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalNumber()).compareTo(other.isSetTotalNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalNumber, other.totalNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatestTime()).compareTo(other.isSetLatestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestTime, other.latestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestTime()).compareTo(other.isSetEarliestTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestTime, other.earliestTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MobileDataBody(");
    boolean first = true;

    sb.append("protocolVersion:");
    if (this.protocolVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolName:");
    if (this.protocolName == null) {
      sb.append("null");
    } else {
      sb.append(this.protocolName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalNumber:");
    sb.append(this.totalNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestTime:");
    sb.append(this.latestTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestTime:");
    sb.append(this.earliestTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MobileDataBodyStandardSchemeFactory implements SchemeFactory {
    public MobileDataBodyStandardScheme getScheme() {
      return new MobileDataBodyStandardScheme();
    }
  }

  private static class MobileDataBodyStandardScheme extends StandardScheme<MobileDataBody> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MobileDataBody struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolVersion = iprot.readString();
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROTOCOL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocolName = iprot.readString();
              struct.setProtocolNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalNumber = iprot.readI64();
              struct.setTotalNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LATEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.latestTime = iprot.readI64();
              struct.setLatestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EARLIEST_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.earliestTime = iprot.readI64();
              struct.setEarliestTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.data = new ArrayList<ByteBuffer>(_list32.size);
                ByteBuffer _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readBinary();
                  struct.data.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MobileDataBody struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocolVersion != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeString(struct.protocolVersion);
        oprot.writeFieldEnd();
      }
      if (struct.protocolName != null) {
        oprot.writeFieldBegin(PROTOCOL_NAME_FIELD_DESC);
        oprot.writeString(struct.protocolName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_NUMBER_FIELD_DESC);
      oprot.writeI64(struct.totalNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATEST_TIME_FIELD_DESC);
      oprot.writeI64(struct.latestTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EARLIEST_TIME_FIELD_DESC);
      oprot.writeI64(struct.earliestTime);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.data.size()));
          for (ByteBuffer _iter35 : struct.data)
          {
            oprot.writeBinary(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MobileDataBodyTupleSchemeFactory implements SchemeFactory {
    public MobileDataBodyTupleScheme getScheme() {
      return new MobileDataBodyTupleScheme();
    }
  }

  private static class MobileDataBodyTupleScheme extends TupleScheme<MobileDataBody> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MobileDataBody struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProtocolVersion()) {
        optionals.set(0);
      }
      if (struct.isSetProtocolName()) {
        optionals.set(1);
      }
      if (struct.isSetTotalNumber()) {
        optionals.set(2);
      }
      if (struct.isSetLatestTime()) {
        optionals.set(3);
      }
      if (struct.isSetEarliestTime()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetProtocolVersion()) {
        oprot.writeString(struct.protocolVersion);
      }
      if (struct.isSetProtocolName()) {
        oprot.writeString(struct.protocolName);
      }
      if (struct.isSetTotalNumber()) {
        oprot.writeI64(struct.totalNumber);
      }
      if (struct.isSetLatestTime()) {
        oprot.writeI64(struct.latestTime);
      }
      if (struct.isSetEarliestTime()) {
        oprot.writeI64(struct.earliestTime);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (ByteBuffer _iter36 : struct.data)
          {
            oprot.writeBinary(_iter36);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MobileDataBody struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.protocolVersion = iprot.readString();
        struct.setProtocolVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.protocolName = iprot.readString();
        struct.setProtocolNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalNumber = iprot.readI64();
        struct.setTotalNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.latestTime = iprot.readI64();
        struct.setLatestTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.earliestTime = iprot.readI64();
        struct.setEarliestTimeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.data = new ArrayList<ByteBuffer>(_list37.size);
          ByteBuffer _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readBinary();
            struct.data.add(_elem38);
          }
        }
        struct.setDataIsSet(true);
      }
    }
  }

}

