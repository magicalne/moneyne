/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-30")
public class PolicyExecutionReport implements org.apache.thrift.TBase<PolicyExecutionReport, PolicyExecutionReport._Fields>, java.io.Serializable, Cloneable, Comparable<PolicyExecutionReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PolicyExecutionReport");

  private static final org.apache.thrift.protocol.TField POLICY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("policyName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("datetime", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STEPS_FIELD_DESC = new org.apache.thrift.protocol.TField("steps", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolicyExecutionReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolicyExecutionReportTupleSchemeFactory());
  }

  public String policyName; // required
  public String datetime; // required
  /**
   * 
   * @see Result
   */
  public Result result; // required
  public List<StepResult> steps; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLICY_NAME((short)1, "policyName"),
    DATETIME((short)2, "datetime"),
    /**
     * 
     * @see Result
     */
    RESULT((short)3, "result"),
    STEPS((short)4, "steps");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLICY_NAME
          return POLICY_NAME;
        case 2: // DATETIME
          return DATETIME;
        case 3: // RESULT
          return RESULT;
        case 4: // STEPS
          return STEPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLICY_NAME, new org.apache.thrift.meta_data.FieldMetaData("policyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATETIME, new org.apache.thrift.meta_data.FieldMetaData("datetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Result.class)));
    tmpMap.put(_Fields.STEPS, new org.apache.thrift.meta_data.FieldMetaData("steps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StepResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PolicyExecutionReport.class, metaDataMap);
  }

  public PolicyExecutionReport() {
  }

  public PolicyExecutionReport(
    String policyName,
    String datetime,
    Result result,
    List<StepResult> steps)
  {
    this();
    this.policyName = policyName;
    this.datetime = datetime;
    this.result = result;
    this.steps = steps;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PolicyExecutionReport(PolicyExecutionReport other) {
    if (other.isSetPolicyName()) {
      this.policyName = other.policyName;
    }
    if (other.isSetDatetime()) {
      this.datetime = other.datetime;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetSteps()) {
      List<StepResult> __this__steps = new ArrayList<StepResult>(other.steps.size());
      for (StepResult other_element : other.steps) {
        __this__steps.add(new StepResult(other_element));
      }
      this.steps = __this__steps;
    }
  }

  public PolicyExecutionReport deepCopy() {
    return new PolicyExecutionReport(this);
  }

  @Override
  public void clear() {
    this.policyName = null;
    this.datetime = null;
    this.result = null;
    this.steps = null;
  }

  public String getPolicyName() {
    return this.policyName;
  }

  public PolicyExecutionReport setPolicyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

  public void unsetPolicyName() {
    this.policyName = null;
  }

  /** Returns true if field policyName is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyName() {
    return this.policyName != null;
  }

  public void setPolicyNameIsSet(boolean value) {
    if (!value) {
      this.policyName = null;
    }
  }

  public String getDatetime() {
    return this.datetime;
  }

  public PolicyExecutionReport setDatetime(String datetime) {
    this.datetime = datetime;
    return this;
  }

  public void unsetDatetime() {
    this.datetime = null;
  }

  /** Returns true if field datetime is set (has been assigned a value) and false otherwise */
  public boolean isSetDatetime() {
    return this.datetime != null;
  }

  public void setDatetimeIsSet(boolean value) {
    if (!value) {
      this.datetime = null;
    }
  }

  /**
   * 
   * @see Result
   */
  public Result getResult() {
    return this.result;
  }

  /**
   * 
   * @see Result
   */
  public PolicyExecutionReport setResult(Result result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getStepsSize() {
    return (this.steps == null) ? 0 : this.steps.size();
  }

  public java.util.Iterator<StepResult> getStepsIterator() {
    return (this.steps == null) ? null : this.steps.iterator();
  }

  public void addToSteps(StepResult elem) {
    if (this.steps == null) {
      this.steps = new ArrayList<StepResult>();
    }
    this.steps.add(elem);
  }

  public List<StepResult> getSteps() {
    return this.steps;
  }

  public PolicyExecutionReport setSteps(List<StepResult> steps) {
    this.steps = steps;
    return this;
  }

  public void unsetSteps() {
    this.steps = null;
  }

  /** Returns true if field steps is set (has been assigned a value) and false otherwise */
  public boolean isSetSteps() {
    return this.steps != null;
  }

  public void setStepsIsSet(boolean value) {
    if (!value) {
      this.steps = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POLICY_NAME:
      if (value == null) {
        unsetPolicyName();
      } else {
        setPolicyName((String)value);
      }
      break;

    case DATETIME:
      if (value == null) {
        unsetDatetime();
      } else {
        setDatetime((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Result)value);
      }
      break;

    case STEPS:
      if (value == null) {
        unsetSteps();
      } else {
        setSteps((List<StepResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POLICY_NAME:
      return getPolicyName();

    case DATETIME:
      return getDatetime();

    case RESULT:
      return getResult();

    case STEPS:
      return getSteps();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POLICY_NAME:
      return isSetPolicyName();
    case DATETIME:
      return isSetDatetime();
    case RESULT:
      return isSetResult();
    case STEPS:
      return isSetSteps();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PolicyExecutionReport)
      return this.equals((PolicyExecutionReport)that);
    return false;
  }

  public boolean equals(PolicyExecutionReport that) {
    if (that == null)
      return false;

    boolean this_present_policyName = true && this.isSetPolicyName();
    boolean that_present_policyName = true && that.isSetPolicyName();
    if (this_present_policyName || that_present_policyName) {
      if (!(this_present_policyName && that_present_policyName))
        return false;
      if (!this.policyName.equals(that.policyName))
        return false;
    }

    boolean this_present_datetime = true && this.isSetDatetime();
    boolean that_present_datetime = true && that.isSetDatetime();
    if (this_present_datetime || that_present_datetime) {
      if (!(this_present_datetime && that_present_datetime))
        return false;
      if (!this.datetime.equals(that.datetime))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_steps = true && this.isSetSteps();
    boolean that_present_steps = true && that.isSetSteps();
    if (this_present_steps || that_present_steps) {
      if (!(this_present_steps && that_present_steps))
        return false;
      if (!this.steps.equals(that.steps))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_policyName = true && (isSetPolicyName());
    list.add(present_policyName);
    if (present_policyName)
      list.add(policyName);

    boolean present_datetime = true && (isSetDatetime());
    list.add(present_datetime);
    if (present_datetime)
      list.add(datetime);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result.getValue());

    boolean present_steps = true && (isSetSteps());
    list.add(present_steps);
    if (present_steps)
      list.add(steps);

    return list.hashCode();
  }

  @Override
  public int compareTo(PolicyExecutionReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPolicyName()).compareTo(other.isSetPolicyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyName, other.policyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatetime()).compareTo(other.isSetDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datetime, other.datetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSteps()).compareTo(other.isSetSteps());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSteps()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.steps, other.steps);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PolicyExecutionReport(");
    boolean first = true;

    sb.append("policyName:");
    if (this.policyName == null) {
      sb.append("null");
    } else {
      sb.append(this.policyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datetime:");
    if (this.datetime == null) {
      sb.append("null");
    } else {
      sb.append(this.datetime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result:");
    if (this.result == null) {
      sb.append("null");
    } else {
      sb.append(this.result);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("steps:");
    if (this.steps == null) {
      sb.append("null");
    } else {
      sb.append(this.steps);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolicyExecutionReportStandardSchemeFactory implements SchemeFactory {
    public PolicyExecutionReportStandardScheme getScheme() {
      return new PolicyExecutionReportStandardScheme();
    }
  }

  private static class PolicyExecutionReportStandardScheme extends StandardScheme<PolicyExecutionReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PolicyExecutionReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLICY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.policyName = iprot.readString();
              struct.setPolicyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datetime = iprot.readString();
              struct.setDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = thrift.generated.Result.findByValue(iprot.readI32());
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STEPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.steps = new ArrayList<StepResult>(_list8.size);
                StepResult _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new StepResult();
                  _elem9.read(iprot);
                  struct.steps.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setStepsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PolicyExecutionReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.policyName != null) {
        oprot.writeFieldBegin(POLICY_NAME_FIELD_DESC);
        oprot.writeString(struct.policyName);
        oprot.writeFieldEnd();
      }
      if (struct.datetime != null) {
        oprot.writeFieldBegin(DATETIME_FIELD_DESC);
        oprot.writeString(struct.datetime);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        oprot.writeFieldBegin(RESULT_FIELD_DESC);
        oprot.writeI32(struct.result.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.steps != null) {
        oprot.writeFieldBegin(STEPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.steps.size()));
          for (StepResult _iter11 : struct.steps)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolicyExecutionReportTupleSchemeFactory implements SchemeFactory {
    public PolicyExecutionReportTupleScheme getScheme() {
      return new PolicyExecutionReportTupleScheme();
    }
  }

  private static class PolicyExecutionReportTupleScheme extends TupleScheme<PolicyExecutionReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PolicyExecutionReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPolicyName()) {
        optionals.set(0);
      }
      if (struct.isSetDatetime()) {
        optionals.set(1);
      }
      if (struct.isSetResult()) {
        optionals.set(2);
      }
      if (struct.isSetSteps()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPolicyName()) {
        oprot.writeString(struct.policyName);
      }
      if (struct.isSetDatetime()) {
        oprot.writeString(struct.datetime);
      }
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result.getValue());
      }
      if (struct.isSetSteps()) {
        {
          oprot.writeI32(struct.steps.size());
          for (StepResult _iter12 : struct.steps)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PolicyExecutionReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.policyName = iprot.readString();
        struct.setPolicyNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.datetime = iprot.readString();
        struct.setDatetimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result = thrift.generated.Result.findByValue(iprot.readI32());
        struct.setResultIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.steps = new ArrayList<StepResult>(_list13.size);
          StepResult _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new StepResult();
            _elem14.read(iprot);
            struct.steps.add(_elem14);
          }
        }
        struct.setStepsIsSet(true);
      }
    }
  }

}

